/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  text,
  boolean,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_media_type = pgEnum("enum_media_type", [
  "image",
  "video",
  "svg",
]);
export const enum_pages_blocks_card_background = pgEnum(
  "enum_pages_blocks_card_background",
  ["light", "dark", "light-blue", "gradient", "none"],
);
export const enum_pages_blocks_card_deck_info_position = pgEnum(
  "enum_pages_blocks_card_deck_info_position",
  ["top", "left", "right"],
);
export const enum_pages_blocks_card_deck_gap = pgEnum(
  "enum_pages_blocks_card_deck_gap",
  ["small", "medium", "large"],
);
export const enum_pages_blocks_card_deck_type = pgEnum(
  "enum_pages_blocks_card_deck_type",
  ["cards", "projects", "full-width-cards"],
);
export const enum_pages_blocks_card_deck_padding = pgEnum(
  "enum_pages_blocks_card_deck_padding",
  ["small", "medium", "large", "none"],
);
export const enum_pages_blocks_collection_collection = pgEnum(
  "enum_pages_blocks_collection_collection",
  ["projects"],
);
export const enum_pages_blocks_collection_collection_info_position = pgEnum(
  "enum_pages_blocks_collection_collection_info_position",
  ["top", "left", "right"],
);
export const enum_pages_status = pgEnum("enum_pages_status", [
  "draft",
  "published",
]);
export const enum__pages_v_blocks_card_background = pgEnum(
  "enum__pages_v_blocks_card_background",
  ["light", "dark", "light-blue", "gradient", "none"],
);
export const enum__pages_v_blocks_card_deck_info_position = pgEnum(
  "enum__pages_v_blocks_card_deck_info_position",
  ["top", "left", "right"],
);
export const enum__pages_v_blocks_card_deck_gap = pgEnum(
  "enum__pages_v_blocks_card_deck_gap",
  ["small", "medium", "large"],
);
export const enum__pages_v_blocks_card_deck_type = pgEnum(
  "enum__pages_v_blocks_card_deck_type",
  ["cards", "projects", "full-width-cards"],
);
export const enum__pages_v_blocks_card_deck_padding = pgEnum(
  "enum__pages_v_blocks_card_deck_padding",
  ["small", "medium", "large", "none"],
);
export const enum__pages_v_blocks_collection_collection = pgEnum(
  "enum__pages_v_blocks_collection_collection",
  ["projects"],
);
export const enum__pages_v_blocks_collection_collection_info_position = pgEnum(
  "enum__pages_v_blocks_collection_collection_info_position",
  ["top", "left", "right"],
);
export const enum__pages_v_version_status = pgEnum(
  "enum__pages_v_version_status",
  ["draft", "published"],
);
export const enum_payload_jobs_log_task_slug = pgEnum(
  "enum_payload_jobs_log_task_slug",
  ["inline", "schedulePublish"],
);
export const enum_payload_jobs_log_state = pgEnum(
  "enum_payload_jobs_log_state",
  ["failed", "succeeded"],
);
export const enum_payload_jobs_task_slug = pgEnum(
  "enum_payload_jobs_task_slug",
  ["inline", "schedulePublish"],
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    type: enum_media_type("type").default("image"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: varchar("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: varchar("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: varchar("sizes_thumbnail_filename"),
    sizes_standard_url: varchar("sizes_standard_url"),
    sizes_standard_width: numeric("sizes_standard_width"),
    sizes_standard_height: numeric("sizes_standard_height"),
    sizes_standard_mimeType: varchar("sizes_standard_mime_type"),
    sizes_standard_filesize: numeric("sizes_standard_filesize"),
    sizes_standard_filename: varchar("sizes_standard_filename"),
    "sizes_icon-small_url": varchar("sizes_icon_small_url"),
    "sizes_icon-small_width": numeric("sizes_icon_small_width"),
    "sizes_icon-small_height": numeric("sizes_icon_small_height"),
    "sizes_icon-small_mimeType": varchar("sizes_icon_small_mime_type"),
    "sizes_icon-small_filesize": numeric("sizes_icon_small_filesize"),
    "sizes_icon-small_filename": varchar("sizes_icon_small_filename"),
    "sizes_icon-large_url": varchar("sizes_icon_large_url"),
    "sizes_icon-large_width": numeric("sizes_icon_large_width"),
    "sizes_icon-large_height": numeric("sizes_icon_large_height"),
    "sizes_icon-large_mimeType": varchar("sizes_icon_large_mime_type"),
    "sizes_icon-large_filesize": numeric("sizes_icon_large_filesize"),
    "sizes_icon-large_filename": varchar("sizes_icon_large_filename"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "media_sizes_thumbnail_sizes_thumbnail_filename_idx",
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_standard_sizes_standard_filename_idx: index(
      "media_sizes_standard_sizes_standard_filename_idx",
    ).on(columns.sizes_standard_filename),
    media_sizes_icon_small_sizes_icon_small_filename_idx: index(
      "media_sizes_icon_small_sizes_icon_small_filename_idx",
    ).on(columns["sizes_icon-small_filename"]),
    media_sizes_icon_large_sizes_icon_large_filename_idx: index(
      "media_sizes_icon_large_sizes_icon_large_filename_idx",
    ).on(columns["sizes_icon-large_filename"]),
  }),
);

export const projects_links = pgTable(
  "projects_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label").notNull(),
    url: varchar("url").notNull(),
    icon: integer("icon_id").references(() => media.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("projects_links_order_idx").on(columns._order),
    _parentIDIdx: index("projects_links_parent_id_idx").on(columns._parentID),
    projects_links_icon_idx: index("projects_links_icon_idx").on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [projects.id],
      name: "projects_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const projects = pgTable(
  "projects",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    description: jsonb("description"),
    featuredImage: integer("featured_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_featured_image_idx: index("projects_featured_image_idx").on(
      columns.featuredImage,
    ),
    projects_updated_at_idx: index("projects_updated_at_idx").on(
      columns.updatedAt,
    ),
    projects_created_at_idx: index("projects_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const projects_rels = pgTable(
  "projects_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    tagsID: integer("tags_id"),
  },
  (columns) => ({
    order: index("projects_rels_order_idx").on(columns.order),
    parentIdx: index("projects_rels_parent_idx").on(columns.parent),
    pathIdx: index("projects_rels_path_idx").on(columns.path),
    projects_rels_media_id_idx: index("projects_rels_media_id_idx").on(
      columns.mediaID,
    ),
    projects_rels_tags_id_idx: index("projects_rels_tags_id_idx").on(
      columns.tagsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [projects.id],
      name: "projects_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "projects_rels_media_fk",
    }).onDelete("cascade"),
    tagsIdFk: foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "projects_rels_tags_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_hero = pgTable(
  "pages_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    description: varchar("description"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_hero_path_idx").on(columns._path),
    pages_blocks_hero_image_idx: index("pages_blocks_hero_image_idx").on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_project = pgTable(
  "pages_blocks_project",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    project: integer("project_id").references(() => projects.id, {
      onDelete: "set null",
    }),
    fullWidth: boolean("full_width").default(false),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_project_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_project_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_project_path_idx").on(columns._path),
    pages_blocks_project_project_idx: index(
      "pages_blocks_project_project_idx",
    ).on(columns.project),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_project_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_card = pgTable(
  "pages_blocks_card",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    description: jsonb("description"),
    background: enum_pages_blocks_card_background("background"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_card_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_card_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_card_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_card_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_card_deck = pgTable(
  "pages_blocks_card_deck",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    description: jsonb("description"),
    infoPosition:
      enum_pages_blocks_card_deck_info_position("info_position").default("top"),
    maxColumns: numeric("max_columns").default("3"),
    gap: enum_pages_blocks_card_deck_gap("gap").default("medium"),
    type: enum_pages_blocks_card_deck_type("type").default("cards"),
    padding: enum_pages_blocks_card_deck_padding("padding").default("small"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_card_deck_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_card_deck_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_card_deck_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_card_deck_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_collection = pgTable(
  "pages_blocks_collection",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    description: jsonb("description"),
    collection:
      enum_pages_blocks_collection_collection("collection").default("projects"),
    collectionInfoPosition:
      enum_pages_blocks_collection_collection_info_position(
        "collection_info_position",
      ).default("top"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_collection_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_collection_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_collection_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_collection_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages = pgTable(
  "pages",
  {
    id: serial("id").primaryKey(),
    title: varchar("title"),
    meta_title: varchar("meta_title"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_description: varchar("meta_description"),
    publishedAt: timestamp("published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar("slug"),
    slugLock: boolean("slug_lock").default(true),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status("_status").default("draft"),
  },
  (columns) => ({
    pages_meta_meta_image_idx: index("pages_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    pages_slug_idx: index("pages_slug_idx").on(columns.slug),
    pages_updated_at_idx: index("pages_updated_at_idx").on(columns.updatedAt),
    pages_created_at_idx: index("pages_created_at_idx").on(columns.createdAt),
    pages__status_idx: index("pages__status_idx").on(columns._status),
  }),
);

export const _pages_v_blocks_hero = pgTable(
  "_pages_v_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title"),
    description: varchar("description"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_hero_path_idx").on(columns._path),
    _pages_v_blocks_hero_image_idx: index("_pages_v_blocks_hero_image_idx").on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_project = pgTable(
  "_pages_v_blocks_project",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    project: integer("project_id").references(() => projects.id, {
      onDelete: "set null",
    }),
    fullWidth: boolean("full_width").default(false),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_project_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_project_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_project_path_idx").on(columns._path),
    _pages_v_blocks_project_project_idx: index(
      "_pages_v_blocks_project_project_idx",
    ).on(columns.project),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_project_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_card = pgTable(
  "_pages_v_blocks_card",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title"),
    description: jsonb("description"),
    background: enum__pages_v_blocks_card_background("background"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_card_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_card_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_card_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_card_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_card_deck = pgTable(
  "_pages_v_blocks_card_deck",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title"),
    description: jsonb("description"),
    infoPosition:
      enum__pages_v_blocks_card_deck_info_position("info_position").default(
        "top",
      ),
    maxColumns: numeric("max_columns").default("3"),
    gap: enum__pages_v_blocks_card_deck_gap("gap").default("medium"),
    type: enum__pages_v_blocks_card_deck_type("type").default("cards"),
    padding: enum__pages_v_blocks_card_deck_padding("padding").default("small"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_card_deck_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_card_deck_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_card_deck_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_card_deck_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_collection = pgTable(
  "_pages_v_blocks_collection",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title"),
    description: jsonb("description"),
    collection:
      enum__pages_v_blocks_collection_collection("collection").default(
        "projects",
      ),
    collectionInfoPosition:
      enum__pages_v_blocks_collection_collection_info_position(
        "collection_info_position",
      ).default("top"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_collection_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_collection_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_collection_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_collection_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v = pgTable(
  "_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => pages.id, {
      onDelete: "set null",
    }),
    version_title: varchar("version_title"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_meta_description: varchar("version_meta_description"),
    version_publishedAt: timestamp("version_published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar("version_slug"),
    version_slugLock: boolean("version_slug_lock").default(true),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _pages_v_parent_idx: index("_pages_v_parent_idx").on(columns.parent),
    _pages_v_version_meta_version_meta_image_idx: index(
      "_pages_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index(
      "_pages_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index(
      "_pages_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index(
      "_pages_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index(
      "_pages_v_version_version__status_idx",
    ).on(columns.version__status),
    _pages_v_created_at_idx: index("_pages_v_created_at_idx").on(
      columns.createdAt,
    ),
    _pages_v_updated_at_idx: index("_pages_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _pages_v_latest_idx: index("_pages_v_latest_idx").on(columns.latest),
    _pages_v_autosave_idx: index("_pages_v_autosave_idx").on(columns.autosave),
  }),
);

export const tags = pgTable(
  "tags",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    url: varchar("url"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tags_updated_at_idx: index("tags_updated_at_idx").on(columns.updatedAt),
    tags_created_at_idx: index("tags_created_at_idx").on(columns.createdAt),
  }),
);

export const skills = pgTable(
  "skills",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    icon: integer("icon_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    url: varchar("url"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    skills_icon_idx: index("skills_icon_idx").on(columns.icon),
    skills_updated_at_idx: index("skills_updated_at_idx").on(columns.updatedAt),
    skills_created_at_idx: index("skills_created_at_idx").on(columns.createdAt),
  }),
);

export const payload_jobs_log = pgTable(
  "payload_jobs_log",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    executedAt: timestamp("executed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp("completed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug("task_slug").notNull(),
    taskID: varchar("task_i_d").notNull(),
    input: jsonb("input"),
    output: jsonb("output"),
    state: enum_payload_jobs_log_state("state").notNull(),
    error: jsonb("error"),
  },
  (columns) => ({
    _orderIdx: index("payload_jobs_log_order_idx").on(columns._order),
    _parentIDIdx: index("payload_jobs_log_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_jobs_log_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_jobs = pgTable(
  "payload_jobs",
  {
    id: serial("id").primaryKey(),
    input: jsonb("input"),
    completedAt: timestamp("completed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    totalTried: numeric("total_tried").default("0"),
    hasError: boolean("has_error").default(false),
    error: jsonb("error"),
    taskSlug: enum_payload_jobs_task_slug("task_slug"),
    queue: varchar("queue").default("default"),
    waitUntil: timestamp("wait_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    processing: boolean("processing").default(false),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index("payload_jobs_completed_at_idx").on(
      columns.completedAt,
    ),
    payload_jobs_total_tried_idx: index("payload_jobs_total_tried_idx").on(
      columns.totalTried,
    ),
    payload_jobs_has_error_idx: index("payload_jobs_has_error_idx").on(
      columns.hasError,
    ),
    payload_jobs_task_slug_idx: index("payload_jobs_task_slug_idx").on(
      columns.taskSlug,
    ),
    payload_jobs_queue_idx: index("payload_jobs_queue_idx").on(columns.queue),
    payload_jobs_wait_until_idx: index("payload_jobs_wait_until_idx").on(
      columns.waitUntil,
    ),
    payload_jobs_processing_idx: index("payload_jobs_processing_idx").on(
      columns.processing,
    ),
    payload_jobs_updated_at_idx: index("payload_jobs_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_jobs_created_at_idx: index("payload_jobs_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    projectsID: integer("projects_id"),
    pagesID: integer("pages_id"),
    tagsID: integer("tags_id"),
    skillsID: integer("skills_id"),
    "payload-jobsID": integer("payload_jobs_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_projects_id_idx: index(
      "payload_locked_documents_rels_projects_id_idx",
    ).on(columns.projectsID),
    payload_locked_documents_rels_pages_id_idx: index(
      "payload_locked_documents_rels_pages_id_idx",
    ).on(columns.pagesID),
    payload_locked_documents_rels_tags_id_idx: index(
      "payload_locked_documents_rels_tags_id_idx",
    ).on(columns.tagsID),
    payload_locked_documents_rels_skills_id_idx: index(
      "payload_locked_documents_rels_skills_id_idx",
    ).on(columns.skillsID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      "payload_locked_documents_rels_payload_jobs_id_idx",
    ).on(columns["payload-jobsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "payload_locked_documents_rels_projects_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "payload_locked_documents_rels_pages_fk",
    }).onDelete("cascade"),
    tagsIdFk: foreignKey({
      columns: [columns["tagsID"]],
      foreignColumns: [tags.id],
      name: "payload_locked_documents_rels_tags_fk",
    }).onDelete("cascade"),
    skillsIdFk: foreignKey({
      columns: [columns["skillsID"]],
      foreignColumns: [skills.id],
      name: "payload_locked_documents_rels_skills_fk",
    }).onDelete("cascade"),
    "payload-jobsIdFk": foreignKey({
      columns: [columns["payload-jobsID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_locked_documents_rels_payload_jobs_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_projects_links = relations(
  projects_links,
  ({ one }) => ({
    _parentID: one(projects, {
      fields: [projects_links._parentID],
      references: [projects.id],
      relationName: "links",
    }),
    icon: one(media, {
      fields: [projects_links.icon],
      references: [media.id],
      relationName: "icon",
    }),
  }),
);
export const relations_projects_rels = relations(projects_rels, ({ one }) => ({
  parent: one(projects, {
    fields: [projects_rels.parent],
    references: [projects.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [projects_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  tagsID: one(tags, {
    fields: [projects_rels.tagsID],
    references: [tags.id],
    relationName: "tags",
  }),
}));
export const relations_projects = relations(projects, ({ one, many }) => ({
  featuredImage: one(media, {
    fields: [projects.featuredImage],
    references: [media.id],
    relationName: "featuredImage",
  }),
  links: many(projects_links, {
    relationName: "links",
  }),
  _rels: many(projects_rels, {
    relationName: "_rels",
  }),
}));
export const relations_pages_blocks_hero = relations(
  pages_blocks_hero,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_hero._parentID],
      references: [pages.id],
      relationName: "_blocks_hero",
    }),
    image: one(media, {
      fields: [pages_blocks_hero.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations_pages_blocks_project = relations(
  pages_blocks_project,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_project._parentID],
      references: [pages.id],
      relationName: "_blocks_project",
    }),
    project: one(projects, {
      fields: [pages_blocks_project.project],
      references: [projects.id],
      relationName: "project",
    }),
  }),
);
export const relations_pages_blocks_card = relations(
  pages_blocks_card,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_card._parentID],
      references: [pages.id],
      relationName: "_blocks_card",
    }),
  }),
);
export const relations_pages_blocks_card_deck = relations(
  pages_blocks_card_deck,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_card_deck._parentID],
      references: [pages.id],
      relationName: "_blocks_card_deck",
    }),
  }),
);
export const relations_pages_blocks_collection = relations(
  pages_blocks_collection,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_collection._parentID],
      references: [pages.id],
      relationName: "_blocks_collection",
    }),
  }),
);
export const relations_pages = relations(pages, ({ one, many }) => ({
  _blocks_hero: many(pages_blocks_hero, {
    relationName: "_blocks_hero",
  }),
  _blocks_project: many(pages_blocks_project, {
    relationName: "_blocks_project",
  }),
  _blocks_card: many(pages_blocks_card, {
    relationName: "_blocks_card",
  }),
  _blocks_card_deck: many(pages_blocks_card_deck, {
    relationName: "_blocks_card_deck",
  }),
  _blocks_collection: many(pages_blocks_collection, {
    relationName: "_blocks_collection",
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
}));
export const relations__pages_v_blocks_hero = relations(
  _pages_v_blocks_hero,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_hero._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_hero",
    }),
    image: one(media, {
      fields: [_pages_v_blocks_hero.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations__pages_v_blocks_project = relations(
  _pages_v_blocks_project,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_project._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_project",
    }),
    project: one(projects, {
      fields: [_pages_v_blocks_project.project],
      references: [projects.id],
      relationName: "project",
    }),
  }),
);
export const relations__pages_v_blocks_card = relations(
  _pages_v_blocks_card,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_card._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_card",
    }),
  }),
);
export const relations__pages_v_blocks_card_deck = relations(
  _pages_v_blocks_card_deck,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_card_deck._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_card_deck",
    }),
  }),
);
export const relations__pages_v_blocks_collection = relations(
  _pages_v_blocks_collection,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_collection._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_collection",
    }),
  }),
);
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: "parent",
  }),
  _blocks_hero: many(_pages_v_blocks_hero, {
    relationName: "_blocks_hero",
  }),
  _blocks_project: many(_pages_v_blocks_project, {
    relationName: "_blocks_project",
  }),
  _blocks_card: many(_pages_v_blocks_card, {
    relationName: "_blocks_card",
  }),
  _blocks_card_deck: many(_pages_v_blocks_card_deck, {
    relationName: "_blocks_card_deck",
  }),
  _blocks_collection: many(_pages_v_blocks_collection, {
    relationName: "_blocks_collection",
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: "version_meta_image",
  }),
}));
export const relations_tags = relations(tags, () => ({}));
export const relations_skills = relations(skills, ({ one }) => ({
  icon: one(media, {
    fields: [skills.icon],
    references: [media.id],
    relationName: "icon",
  }),
}));
export const relations_payload_jobs_log = relations(
  payload_jobs_log,
  ({ one }) => ({
    _parentID: one(payload_jobs, {
      fields: [payload_jobs_log._parentID],
      references: [payload_jobs.id],
      relationName: "log",
    }),
  }),
);
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: "log",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: "projects",
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: "tags",
    }),
    skillsID: one(skills, {
      fields: [payload_locked_documents_rels.skillsID],
      references: [skills.id],
      relationName: "skills",
    }),
    "payload-jobsID": one(payload_jobs, {
      fields: [payload_locked_documents_rels["payload-jobsID"]],
      references: [payload_jobs.id],
      relationName: "payload-jobs",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_media_type: typeof enum_media_type;
  enum_pages_blocks_card_background: typeof enum_pages_blocks_card_background;
  enum_pages_blocks_card_deck_info_position: typeof enum_pages_blocks_card_deck_info_position;
  enum_pages_blocks_card_deck_gap: typeof enum_pages_blocks_card_deck_gap;
  enum_pages_blocks_card_deck_type: typeof enum_pages_blocks_card_deck_type;
  enum_pages_blocks_card_deck_padding: typeof enum_pages_blocks_card_deck_padding;
  enum_pages_blocks_collection_collection: typeof enum_pages_blocks_collection_collection;
  enum_pages_blocks_collection_collection_info_position: typeof enum_pages_blocks_collection_collection_info_position;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_blocks_card_background: typeof enum__pages_v_blocks_card_background;
  enum__pages_v_blocks_card_deck_info_position: typeof enum__pages_v_blocks_card_deck_info_position;
  enum__pages_v_blocks_card_deck_gap: typeof enum__pages_v_blocks_card_deck_gap;
  enum__pages_v_blocks_card_deck_type: typeof enum__pages_v_blocks_card_deck_type;
  enum__pages_v_blocks_card_deck_padding: typeof enum__pages_v_blocks_card_deck_padding;
  enum__pages_v_blocks_collection_collection: typeof enum__pages_v_blocks_collection_collection;
  enum__pages_v_blocks_collection_collection_info_position: typeof enum__pages_v_blocks_collection_collection_info_position;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug;
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state;
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug;
  users: typeof users;
  media: typeof media;
  projects_links: typeof projects_links;
  projects: typeof projects;
  projects_rels: typeof projects_rels;
  pages_blocks_hero: typeof pages_blocks_hero;
  pages_blocks_project: typeof pages_blocks_project;
  pages_blocks_card: typeof pages_blocks_card;
  pages_blocks_card_deck: typeof pages_blocks_card_deck;
  pages_blocks_collection: typeof pages_blocks_collection;
  pages: typeof pages;
  _pages_v_blocks_hero: typeof _pages_v_blocks_hero;
  _pages_v_blocks_project: typeof _pages_v_blocks_project;
  _pages_v_blocks_card: typeof _pages_v_blocks_card;
  _pages_v_blocks_card_deck: typeof _pages_v_blocks_card_deck;
  _pages_v_blocks_collection: typeof _pages_v_blocks_collection;
  _pages_v: typeof _pages_v;
  tags: typeof tags;
  skills: typeof skills;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_projects_links: typeof relations_projects_links;
  relations_projects_rels: typeof relations_projects_rels;
  relations_projects: typeof relations_projects;
  relations_pages_blocks_hero: typeof relations_pages_blocks_hero;
  relations_pages_blocks_project: typeof relations_pages_blocks_project;
  relations_pages_blocks_card: typeof relations_pages_blocks_card;
  relations_pages_blocks_card_deck: typeof relations_pages_blocks_card_deck;
  relations_pages_blocks_collection: typeof relations_pages_blocks_collection;
  relations_pages: typeof relations_pages;
  relations__pages_v_blocks_hero: typeof relations__pages_v_blocks_hero;
  relations__pages_v_blocks_project: typeof relations__pages_v_blocks_project;
  relations__pages_v_blocks_card: typeof relations__pages_v_blocks_card;
  relations__pages_v_blocks_card_deck: typeof relations__pages_v_blocks_card_deck;
  relations__pages_v_blocks_collection: typeof relations__pages_v_blocks_collection;
  relations__pages_v: typeof relations__pages_v;
  relations_tags: typeof relations_tags;
  relations_skills: typeof relations_skills;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
